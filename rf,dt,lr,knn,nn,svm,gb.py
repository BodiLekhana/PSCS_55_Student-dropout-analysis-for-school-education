# -*- coding: utf-8 -*-
"""RF,DT,LR,KNN,NN,SVM,GB.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QQzHtDT9Ohp5RdD2QyxOYmUZb44a-9hX
"""

# Importing and reading the dataset using pandas

import pandas as pd
import numpy as np
data=pd.read_csv("student_dropout_dataset_updated.csv")
print(data.shape)
data.head(10)

print(data.describe())
data.info()

data=data.drop(['Student_ID','Name'], axis=1)
data.head(5)

# 0 - student has dropped out
# 1 - student has not dropped out

# Libraries for implementation and checking performance of ML models

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder          # converts string values to numeric values
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
import matplotlib.pyplot as plt
from sklearn import tree
from sklearn.tree import plot_tree
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix, roc_curve, auc

# data=pd.get_dummies(data)
# data["Dropout_Status"] = data["Dropout_Status"].map({0: "No", 1: "Yes"})
# X = pd.get_dummies(data.values[:, 1:11])
# Y = data.values[:, 11]
# X = pd.get_dummies(X)
# X = df.iloc[:, :-1].values
# y = df.iloc[:, -1].values

X = pd.get_dummies(data.iloc[:, 1:11])
Y = data.iloc[:, 11] # stores target values
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=100)
                                                        # splitting percentage, change in picking random values

"""**IMPLEMENTATION OF RANDOM FOREST**"""

RFmodel = RandomForestClassifier(n_estimators=100, random_state=42)
# estimators - number of decision trees in forest

RFmodel.fit(X_train, y_train)
# used to train machine learning models. It adjusts the parameters of the model based on the provided data.

# to generate predictions for new or unseen data
Y_pred = RFmodel.predict(X_test)

# random forest performance

accuracy = accuracy_score(y_test, Y_pred)
print("Accuracy:", accuracy)
print("---------------------------------------------------")

cm = confusion_matrix(y_test, Y_pred)
print("Confusion Matrix:\n", cm)
print("---------------------------------------------------")

# Classification Report for precision, recall, F1-score
print("Classification Report:\n", classification_report(y_test, Y_pred))

features = X.columns
class_names = ['0', '1'] # Assuming 0 and 1 are your class names
plt.figure(figsize=(20,10))  # Set figure size to make the tree more readable
plot_tree(clf_gini, # Using the decision tree model trained with gini
          feature_names=features,  # Use the feature names from the dataset
          class_names=class_names,  # Use class names (species names)
          filled=True,              # Fill nodes with colors for better visualization
          rounded=True)             # Rounded edges for nodes
plt.title("Decision Tree from the Random Forest") # Note: This is a Decision Tree, not Random Forest
plt.show()

# Plot ROC Curve
y_prob = RFmodel.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2,
         label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='Random')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve\nAccuracy: {:.2f}%'.format(
    accuracy * 100))
plt.legend(loc="lower right")
plt.show()

"""**IMPLEMENTATION OF DECISION TREE**"""

# creating the classifier object
# creates a classifier object with the specified parameters (criterion, random state, max depth, min samples leaf)

clf_gini = DecisionTreeClassifier(criterion="gini",
                                      random_state=100, max_depth=3, min_samples_leaf=5)
clf_gini.fit(X_train, y_train)

clf_entropy = DecisionTreeClassifier(criterion="entropy", random_state=100, max_depth=3, min_samples_leaf=5)

clf_entropy.fit(X_train, y_train)

y_pred = clf_gini.predict(X_test)

# decision tree performance using gini index

accuracy = accuracy_score(y_test, Y_pred)
print("Accuracy:", accuracy)
print("---------------------------------------------------")

cm = confusion_matrix(y_test, Y_pred)
print("Confusion Matrix:\n", cm)
print("---------------------------------------------------")

# Classification Report for precision, recall, F1-score
print("Classification Report:\n", classification_report(y_test, Y_pred))

y_pred = clf_entropy.predict(X_test)

# decision tree performance using entropy

accuracy = accuracy_score(y_test, Y_pred)
print("Accuracy:", accuracy)
print("---------------------------------------------------")

cm = confusion_matrix(y_test, Y_pred)
print("Confusion Matrix:\n", cm)
print("---------------------------------------------------")

# Classification Report for precision, recall, F1-score
print("Classification Report:\n", classification_report(y_test, Y_pred))

# Function to plot the decision tree
def plot_decision_tree(clf_object, feature_names, class_names):
    plt.figure(figsize=(15, 10))
    plot_tree(clf_object, filled=True, feature_names=feature_names, class_names=class_names, rounded=True)
    plt.show()

plot_decision_tree(clf_gini, X.columns, ['0','1'])

# Plot ROC Curve
y_prob = clf_gini.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2,
         label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='Random')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve\nAccuracy: {:.2f}%'.format(
    accuracy * 100))
plt.legend(loc="lower right")
plt.show()

"""**IMPLEMENTATION OF DECISION TREE**"""

LRmodel = LogisticRegression()
LRmodel.fit(X_train, y_train)

y_pred = LRmodel.predict(X_test)

# linear regression performance

accuracy = accuracy_score(y_test, Y_pred)
print("Accuracy:", accuracy)
print("---------------------------------------------------")

cm = confusion_matrix(y_test, Y_pred)
print("Confusion Matrix:\n", cm)
print("---------------------------------------------------")

# Classification Report for precision, recall, F1-score
print("Classification Report:\n", classification_report(y_test, Y_pred))

# Plot ROC Curve
y_prob = LRmodel.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2,
         label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='Random')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve\nAccuracy: {:.2f}%'.format(
    accuracy * 100))
plt.legend(loc="lower right")
plt.show()

"""**IMPLEMENTATION OF KNN**"""

knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

y_pred = knn.predict(X_test)

from sklearn.model_selection import cross_val_score

# Range of k values to try
k_range = range(1, 21)
cv_scores = []

# Evaluate each k using 5-fold cross-validation
for k in k_range:
    knn = KNeighborsClassifier(n_neighbors=k)
    scores = cross_val_score(knn, X_scaled, y, cv=5, scoring='accuracy')
    cv_scores.append(scores.mean())

# Plot accuracy vs. k
plt.figure(figsize=(8, 5))
plt.plot(k_range, cv_scores, marker='o')
plt.title("k-NN Cross-Validation Accuracy vs k")
plt.xlabel("Number of Neighbors: k")
plt.ylabel("Cross-Validated Accuracy")
plt.grid(True)
plt.show()

# Best k
best_k = k_range[np.argmax(cv_scores)]
print(f"Best k from cross-validation: {best_k}")

# knn performance

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("---------------------------------------------------")

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)
print("---------------------------------------------------")

# Classification Report for precision, recall, F1-score
print("Classification Report:\n", classification_report(y_test, y_pred))

# Plot ROC Curve
knn.fit(X_train, y_train) # Refit the model
y_prob = knn.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2,
         label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='Random')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve\nAccuracy: {:.2f}%'.format(
    accuracy * 100))
plt.legend(loc="lower right")
plt.show()

"""**IMPLEMENTATION ON NAIVE BAYES**"""

nb_classifier = GaussianNB()

nb_classifier.fit(X_train, y_train)

y_pred = nb_classifier.predict(X_test)

# naive bayesian performance

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("---------------------------------------------------")

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)
print("---------------------------------------------------")

# Classification Report for precision, recall, F1-score
print("Classification Report:\n", classification_report(y_test, y_pred))

# Plot ROC Curve
nb_classifier.fit(X_train, y_train) # Refit the model
y_prob = nb_classifier.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2,
         label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='Random')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve\nAccuracy: {:.2f}%'.format(
    accuracy * 100))
plt.legend(loc="lower right")
plt.show()

"""**IMPLEMENTATION OF SVM**"""

svm = SVC(kernel='linear', C=1.0, random_state=42)
# kernel='linear': uses a linear kernel for classification
# C=1.0: regularization parameter to control margin vs misclassification
svm.fit(X_train, y_train)
y_pred = svm.predict(X_test)

# SVM performance

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("---------------------------------------------------")

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)
print("---------------------------------------------------")

# Classification Report for precision, recall, F1-score
print("Classification Report:\n", classification_report(y_test, y_pred))

# Plot ROC Curve
svm.fit(X_train, y_train) # Refit the model
y_prob = svm.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2,label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='Random')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve\nAccuracy: {:.2f}%'.format(accuracy * 100))
plt.legend(loc="lower right")
plt.show()

"""**IMPLEMENTATION OF GRADIENT BOOSTING**"""

gb_clf = GradientBoostingClassifier(n_estimators=100,learning_rate=0.1, max_depth=3, random_state=42)
gb_clf.fit(X_train, y_train)
y_pred = gb_clf.predict(X_test)

# gradient boosting performance

accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
print("---------------------------------------------------")

cm = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:\n", cm)
print("---------------------------------------------------")

# Classification Report for precision, recall, F1-score
print("Classification Report:\n", classification_report(y_test, y_pred))

# Plot ROC Curve
gb_clf.fit(X_train, y_train) # Refit the model
y_prob = gb_clf.predict_proba(X_test)[:, 1]
fpr, tpr, thresholds = roc_curve(y_test, y_prob)
roc_auc = auc(fpr, tpr)

plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='darkorange', lw=2,label=f'ROC Curve (AUC = {roc_auc:.2f})')
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--', label='Random')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic (ROC) Curve\nAccuracy: {:.2f}%'.format(accuracy * 100))
plt.legend(loc="lower right")
plt.show()