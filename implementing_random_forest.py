# -*- coding: utf-8 -*-
"""Implementing_Random_Forest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QQzHtDT9Ohp5RdD2QyxOYmUZb44a-9hX
"""

# Importing and reading the dataset using pandas

import pandas as pd
import numpy as np
data=pd.read_csv("student_dropout_dataset.csv")
print(data.shape)
data.head(10)

data=data.drop(['Student_ID','Name'], axis=1)
data.head(5)

# 0 - student has dropped out
# 1 - student has not dropped out

# Libraries for implementation and checking performance of model

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder          # converts string values to numeric values
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix

# data=pd.get_dummies(data)
# data["Dropout_Status"] = data["Dropout_Status"].map({0: "No", 1: "Yes"})
# X = pd.get_dummies(data.values[:, 1:11])
# Y = data.values[:, 11]
# X = pd.get_dummies(X)

X = pd.get_dummies(data.iloc[:, 1:11])
Y = data.iloc[:, 11] # stores target values
X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.3, random_state=100)
                                                        # splitting percentage, change in picking random values

model = RandomForestClassifier(n_estimators=100, random_state=42)
# estimators - number of decision trees in forest

model.fit(X_train, y_train)
# used to train machine learning models. It adjusts the parameters of the model based on the provided data.

Y_pred = model.predict(X_test)
# to generate predictions for new or unseen data

# model performance

accuracy = accuracy_score(y_test, Y_pred)
print("Accuracy:", accuracy)
print("---------------------------------------------------")

cm = confusion_matrix(y_test, Y_pred)
print("Confusion Matrix:\n", cm)
print("---------------------------------------------------")

# Classification Report for precision, recall, F1-score
print("Classification Report:\n", classification_report(y_test, Y_pred))